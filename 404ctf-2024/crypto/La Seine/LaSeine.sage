from Crypto.Util.number import *
import sys
import itertools
from tqdm import tqdm

def S_split(f):
	if len(f) & 1:
		f += b"\x00"
	h = len(f) // 2
	return (bytes_to_long(f[:h]), bytes_to_long(f[h:]))

p = 179358513830906148619403250482250880334528756349120678091666297907253922185623290723862265402777434007178297319701286775733620488613530869850160450412929764046707392082705800333548316425165863556480623955587411083384086805686199851628022437853672200835000268893800610064747558825805271528526924659142504913631

xf, yf = (151683403543233106224623577311980037274441590153911847119566701699367001537936290730922138442040542620222943385810242081949211326676472369180020899628646165132503185978510932501521730827126356422842852151275382840062708701174847422687809816503983740455064453231285796998931373590630224653066573035583863902921, 76688287388975729010764722746414768266232185597001389966088556498895611351239273625106383329192109917896575986761053032041287081527278426860237114874927478625771306887851752909713110684616229318569024945188998933167888234990912716799093707141023542980852524005127986940863843004517549295449194995101172400759)

k, xn, yn = (929382, 118454610237220659897316062413105144789761952332893713333891996727204456010112572423850661749643268291339194773488138402728325770671625196790011560475297285424138262812704729573910897903628228179414627406601128765472041473647769084599481166191241495167773352105622894240398746332477947478817552973851804951566, 65891615565820497528921288257089595342791556688007325193257144738940922602117787746412089423500836495505254334866586155889060897532850381510520943387446058037766901712521471259853536310481267471645770625452422081411718151580380288380630522313377397166067417623947500542258985636659962524606869196898543973764)

# Debug

# p = 135190625407140481119530705092634926016205677349168694473376735028095484913143782264708592482506106472240424410059468026474301802894992101086107251069485424191924476979617196258772922637637567645918247823564634278431564690114774925585759108976647928894290815356317655229123688418425904519439983339437833659977

# xf, yf = (47601672960944722333785656641378928841481939270905249785010415885888877749640306336602788626250348787574472836991022957061345743285122034338487660020421652997080586003699404115651351731969617819096490689182426410446302308014151224411118315147855158767833913168623278239577841756603124595297434722545303612185, 85032707129703391992066429640820551099795893679037761605837141571953211076450156844764216156214404224155853633059523606231097825026622787989069425856803663105680206444399471944269147036110173852580845562239316798059034223339201323538239060189791340098578219799290902420055606485942021279341966549103799065308)


# k, xn, yn = (929382, 98628589944086045607846463254684562488873710513415295793247980088259059730636402583816067112735970580778324013611226322059473342829519857306412342703127710331078587706347894075650838740045883117357532700598920116140761571526246754375205749875641627926710196529935949504450871609540878877986049266144193869208, 52981946619232326683142861062880065086090334743171706163349212881776095673840371020230046709067491523668018155533339631047071599320769033486394652701919207001376047446310403740655576884634195327050535121340836640857954948899634327711248531148638028108796091530426934350307903625831050537303590487812865080823)



print('[DEBUG] Step 1: Recovering (a^2+b^2)^(k//2) % p')
'''
k = 929382
a, b = var('a, b')
M = matrix(SR, 2, [
	[a, b],
	[b,-a]
])
print(M ** k)

Paire: (k=929382)
[(a^2 + b^2)^464691				  0]
[				 0 (a^2 + b^2)^464691]

ImPaire: (k=7)
[ (a^2 + b^2)^3*a  (a^2 + b^2)^3*b]
[ (a^2 + b^2)^3*b -(a^2 + b^2)^3*a]
'''
x0, y0 = S_split(b"L'eau est vraiment froide par ici (et pas tres propre)")

c1 = (xn * pow(x0, -1, p)) % p
c2 = (yn * pow(y0, -1, p)) % p

assert c1 == c2
print(f'[DEBUG] Step 1: (a^2+b^2)^(k//2) % p == {str(c1)}\n')


print('[DEBUG] Step 2: Decrypting RSA ...')
phi = p-1
e = (k//2)
d = pow(e, -1, phi)
a2pb2 = pow(c1, d, p)
print(f'[DEBUG] Step 2: a^2+b^2 == {str(a2pb2)}\n')

print('[DEBUG] Step 3: Recovering (a, b) candidates')

print('[DEBUG]		 Guetting count of solutions')
# https://en.wikipedia.org/wiki/Sum_of_squares_function 
divisors  = a2pb2.divisors()
d1 = len([x for x in divisors if (1==(x % 4))])
d3 = len([x for x in divisors if (3==(x % 4))])
r = 4*(d1-d3) # Jacobi's two-square theorem	
print(f'[DEBUG]		 Count of solutions: {str(r)}')


# https://mathworld.wolfram.com/SumofSquaresFunction.html
# https://reference.wolfram.com/language/ref/PowersRepresentations.html
# PowersRepresentations[388070793197506567215490364778692980485, 2, 2] => Non
# https://mathoverflow.net/questions/29644/enumerating-ways-to-decompose-an-integer-into-the-sum-of-two-squares
# https://www.ams.org/journals/mcom/1990-55-191/S0025-5718-1990-1023762-3/S0025-5718-1990-1023762-3.pdf
# Hardy-Muskat-Williams algorithm 
# https://people.math.carleton.ca/~williams/papers/pdf/202.pdf

def hardy_muskat_williams_algo(n: Integer) -> list[list[Integer, Integer]]:
	def solve_roots(a, n):
		# return all z, solutions for z^2 = a % n if n is not prime
		# Step 1: Factor n
		factors = []
		for prime, cnt in dict(factor(n)).items():
			factors.extend([prime for _ in range(cnt)])

		# Step 2: Solve fo each primes:
		all_roots = []
		for f in factors:
			x = PolynomialRing(GF(f), 'x').gen()
			roots = []
			c = (-1)%f
			try:
				p = x^2 - a
				roots.extend([r[0] for r in p.roots()])
			except:
				pass	
			all_roots.append(roots)

		roots, moduli = [], []
		for i, r in enumerate(all_roots):
			if r == []:
				continue
			roots.append(r)
			moduli.append(int(factors[i]))

		# Step 3:  CRT on all combinations:
		sol = []
		for combi in list(itertools.product(*roots)):
			combi = [int(x) for x in combi]
			s = CRT(combi, moduli)
			sol.append(s)

		return sol

	def reminder(a, b, Bound):
		if (a < Bound):
			return a
		else:
			return reminder(b, a % b, Bound)

	all_z = solve_roots(a=-1, n=n)
	B = int(pow(n, 1/2))
	r = [reminder(zi, n, Bound=B) for zi in all_z]
	s = [(u, int(pow((n-u**2), 1/2))) for u in r]

	# Verification
	s = [(u, v) for u, v in s if (u**2 + v**2) == n]

	# couple (a,b) can be (b,a)
	result = []
	for u, v in s:
		if (u, v) not in result:
			result.append((u, v))
		if (v, u) not in result:
			result.append((v, u))
	return result

possible_ab = hardy_muskat_williams_algo(n=a2pb2)

for k, (a,b) in enumerate(possible_ab):
	print(f"Canditate N°{k}: a={a} | b={b}")

# Verification
assert all([(a**2+b**2)%p == a2pb2 for a, b in possible_ab])

print(f'[DEBUG] Step 3: Found {str(len(possible_ab))} candidates\n')


print('[DEBUG] Step 4: Bruteforcing exponent < 2**21 for all candidates')

"""
								 [1 0]
[x0, y0] * ((a^2 + b^2)^(k//2) * [0 1] )  == [xn, yn]

		   [a*(a^2+b^2)**q  b*(a^2+b^2)**q]
[x0, y0] * [b*(a^2+b^2)**q -a*(a^2+b^2)**q] == [f1, f2]

"""

R = GF(p)
for a,b in possible_ab:
	print(f'[DEBUG] Step 4: Trying a={str(a)} | b={str(b)}')

	M = matrix(R,[[xf, yf]])

	for q in tqdm(range(0, 2**21)):
		X = matrix(R, [
			[R(a**2 + b**2)**q * a,  R(a**2 + b**2)**q * b],
			[R(a**2 + b**2)**q * b, -R(a**2 + b**2)**q * a]
		])

		r = (X.solve_left(M)).row(0)

		r1 = long_to_bytes(int(r[0]) % p)
		r2 = long_to_bytes(int(r[1]) % p)

		if b'404CTF' in r1 or b'404CTF' in r2:
			print()
			print(f'flag = {str(r1+r2)}', flush=True, file=sys.stdout)
			print(f' q   = {str(q)}', flush=True, file=sys.stdout)
			print(f' a   = {str(a)}', flush=True, file=sys.stdout)
			print(f' b   = {str(b)}', flush=True, file=sys.stdout)
			exit(0)


'''
xn = x0 * (a**2 + b**2)**464691 % p
yn = y0 * (a**2 + b**2)**464691 % p

f1(a, b) = x0 * (a**2 + b**2)**464691 - xn
f2(a, b) = y0 * (a**2 + b**2)**464691 - yn

f(a, b) = f1(a, b)+f2(a, b)
f(a, b) = (x0-y0) * (a**2 + b**2)**(k//2) - (xn+yn)
=> Bonne piste mais poly trop grand.
'''


"""

class MaSeine:
	def __init__(self, a, b):
		self.l = 20
		self.p = p
		self.a = a
		self.b = b	

	def split(self, f):
		if len(f) & 1:
			f += b"\x00"
		h = len(f) // 2
		return (bytes_to_long(f[:h]), bytes_to_long(f[h:]))

	def sign(self, x0, y0, k):
		M = matrix(R,[[x0, y0]])

		if k % 2 == 0:
			X = matrix(R, [
				[(self.a**2 + self.b**2)**(k//2), 0],
				[0, (self.a**2 + self.b**2)**(k//2)]
			])
		else:
			X = matrix(R, [
				[R(self.a**2 + self.b**2)**(k//2) * self.a,  R(self.a**2 + self.b**2)**(k//2) * self.b],
				[R(self.a**2 + self.b**2)**(k//2) * self.b, -R(self.a**2 + self.b**2)**(k//2) * self.a]
			])

		M *= X
		return (k, M.row(0)[0], M.row(0)[1])

#	# Vérification de la simplification
# seine = LaSeine(1024)
# k, xn, yn = seine.sign(b"L'eau est vraiment froide par ici (et pas tres propre)", 0)
# xn2, yn2 =  seine.sign2(b"L'eau est vraiment froide par ici (et pas tres propre)", 0, k=k)
# assert (xn, yn) == (xn2, yn2)


# R = GF(p)
# P = PolynomialRing(R, 'a, b')
# a, b = P.gens()
# S = MaSeine(a, b)
"""

"""
[DEBUG] Step 1: Recovering (a^2+b^2)^(k//2) % p
[DEBUG] Step 1: (a^2+b^2)^(k//2) % p == 146302614110156708622432421061434755001785612894551707645370931240860498599588585094920394945856400050450267744090468101739841551816457167514883147681523474671723586032702767056810499992432868718847586460620936916445615594663408653907883623388841328595077918949965202483450706396111634462369248345075573583170

[DEBUG] Step 2: Decrypting RSA ...
[DEBUG] Step 2: a^2+b^2 == 388070793197506567215490364778692980485

[DEBUG] Step 3: Recovering (a, b) candidates
[DEBUG]          Guetting count of solutions
[DEBUG]          Count of solutions: 256
Canditate N°0: a=18028122996648466623 | b=7940879952198073566
Canditate N°1: a=7940879952198073566 | b=18028122996648466623
Canditate N°2: a=19278421247870619546 | b=4051329088972801713
Canditate N°3: a=4051329088972801713 | b=19278421247870619546
Canditate N°4: a=19696085062535506209 | b=367459394861897202
Canditate N°5: a=367459394861897202 | b=19696085062535506209
Canditate N°6: a=13472728406892388146 | b=14372069526398119263
Canditate N°7: a=14372069526398119263 | b=13472728406892388146
Canditate N°8: a=19562583654311853522 | b=2318644855418193249
Canditate N°9: a=2318644855418193249 | b=19562583654311853522
Canditate N°10: a=9623850958962817041 | b=17188725546624363798
Canditate N°11: a=17188725546624363798 | b=9623850958962817041
Canditate N°12: a=15304703228642093343 | b=12403098495162362094
Canditate N°13: a=12403098495162362094 | b=15304703228642093343
Canditate N°14: a=19105300733315145681 | b=4801903485816257418
Canditate N°15: a=4801903485816257418 | b=19105300733315145681
Canditate N°16: a=12111618553410821487 | b=15536392413111266646
Canditate N°17: a=15536392413111266646 | b=12111618553410821487
Canditate N°18: a=8944517033962093626 | b=17551820652760457103
Canditate N°19: a=17551820652760457103 | b=8944517033962093626
Canditate N°20: a=14808116019900613098 | b=12991939544912814609
Canditate N°21: a=12991939544912814609 | b=14808116019900613098
Canditate N°22: a=6341130331813687281 | b=18651028371445339782
Canditate N°23: a=18651028371445339782 | b=6341130331813687281
Canditate N°24: a=11251784827398101583 | b=16169976233607779814
Canditate N°25: a=16169976233607779814 | b=11251784827398101583
Canditate N°26: a=16580445221025715647 | b=10637651501627230626
Canditate N°27: a=10637651501627230626 | b=16580445221025715647
Canditate N°28: a=19673288263522620246 | b=1016130945227873937
Canditate N°29: a=1016130945227873937 | b=19673288263522620246
Canditate N°30: a=18916879495873041582 | b=5497496096963113569
Canditate N°31: a=5497496096963113569 | b=18916879495873041582
Canditate N°32: a=19581292665253928298 | b=2154941009675038959
Canditate N°33: a=2154941009675038959 | b=19581292665253928298
Canditate N°34: a=18432001254876301407 | b=6952130819953334094
Canditate N°35: a=6952130819953334094 | b=18432001254876301407
Canditate N°36: a=19408166742585621858 | b=3375478764486599361
Canditate N°37: a=3375478764486599361 | b=19408166742585621858
Canditate N°38: a=11116144498068059457 | b=16263521288318153694
Canditate N°39: a=16263521288318153694 | b=11116144498068059457
[DEBUG] Step 3: Found 40 candidates

[DEBUG] Step 4: Bruteforcing exponent < 2**21 for all candidates
[DEBUG] Step 4: Trying a=18028122996648466623 | b=7940879952198073566
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:45<00:00, 3582.12it/s]
[DEBUG] Step 4: Trying a=7940879952198073566 | b=18028122996648466623
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:44<00:00, 3585.10it/s]
[DEBUG] Step 4: Trying a=19278421247870619546 | b=4051329088972801713
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:46<00:00, 3578.60it/s]
[DEBUG] Step 4: Trying a=4051329088972801713 | b=19278421247870619546
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:32<00:00, 3661.18it/s]
[DEBUG] Step 4: Trying a=19696085062535506209 | b=367459394861897202
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:12<00:00, 3792.89it/s]
[DEBUG] Step 4: Trying a=367459394861897202 | b=19696085062535506209
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:10<00:00, 3806.56it/s]
[DEBUG] Step 4: Trying a=13472728406892388146 | b=14372069526398119263
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2097152/2097152 [09:42<00:00, 3603.02it/s]
[DEBUG] Step 4: Trying a=14372069526398119263 | b=13472728406892388146
 16%|████████████████████▍                                                                                                       | 345824/2097152 [01:32<07:39, 3808.88it/s]
flag = b'404CTF{F4u7_p4S_80iR3_l4_t4ss3...}'
 q   = 345849
 a   = 14372069526398119263
 16%|████████████████████▍                                                                                                       | 345849/2097152 [01:32<07:48, 3736.72it/s]
 b   = 13472728406892388146
 """